import IntlMessageFormat from 'intl-messageformat';
import { ReactElement, ReactNodeArray } from 'react';
import AbstractIntlMessages from './AbstractIntlMessages.mjs';
import Formats from './Formats.mjs';
import { InitializedIntlConfig } from './IntlConfig.mjs';
import IntlError from './IntlError.mjs';
import TranslationValues, { RichTranslationValues } from './TranslationValues.mjs';
import MessageKeys from './utils/MessageKeys.mjs';
import NestedKeyOf from './utils/NestedKeyOf.mjs';
import NestedValueOf from './utils/NestedValueOf.mjs';
import './DateTimeFormatOptions.mjs';
import './TimeZone.mjs';
import '@formatjs/ecma402-abstract/types/number';

declare function getMessagesOrError<Messages extends AbstractIntlMessages>({ messages, namespace, onError }: {
    messages: Messages;
    namespace?: string;
    onError?(error: IntlError): void;
}): AbstractIntlMessages | IntlError;
type CreateBaseTranslatorProps<Messages> = InitializedIntlConfig & {
    cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;
    defaultTranslationValues?: RichTranslationValues;
    namespace?: string;
    messagesOrError: Messages | IntlError;
};
declare function createBaseTranslator<Messages extends AbstractIntlMessages, NestedKey extends NestedKeyOf<Messages>>({ cachedFormatsByLocale, defaultTranslationValues, formats: globalFormats, getMessageFallback, locale, messagesOrError, namespace, onError, timeZone }: CreateBaseTranslatorProps<Messages>): {
    <TargetKey extends MessageKeys<NestedValueOf<Messages, NestedKey>, NestedKeyOf<NestedValueOf<Messages, NestedKey>>>>(key: TargetKey, values?: TranslationValues, formats?: Partial<Formats>): string;
    rich: (key: string, values?: RichTranslationValues, formats?: Partial<Formats>) => string | ReactElement | ReactNodeArray;
    raw(key: string): any;
};

export { CreateBaseTranslatorProps, createBaseTranslator as default, getMessagesOrError };
