{"version":3,"sources":["../../src/react/useNow.tsx"],"sourcesContent":["import {useState, useEffect} from 'react';\nimport useIntlContext from './useIntlContext';\n\ntype Options = {\n  updateInterval?: number;\n};\n\nfunction getNow() {\n  return new Date();\n}\n\n/**\n * Reading the current date via `new Date()` in components should be avoided, as\n * it causes components to be impure and can lead to flaky tests. Instead, this\n * hook can be used.\n *\n * By default, it returns the time when the component mounts. If `updateInterval`\n * is specified, the value will be updated based on the interval.\n *\n * You can however also return a static value from this hook, if you\n * configure the `now` parameter on the context provider. Note however,\n * that if `updateInterval` is configured in this case, the component\n * will initialize with the global value, but will afterwards update\n * continuously based on the interval.\n *\n * For unit tests, this can be mocked to a constant value. For end-to-end\n * testing, an environment parameter can be passed to the `now` parameter\n * of the provider to mock this to a static value.\n */\nexport default function useNow(options?: Options) {\n  const updateInterval = options?.updateInterval;\n\n  const {now: globalNow} = useIntlContext();\n  const [now, setNow] = useState(globalNow || getNow());\n\n  useEffect(() => {\n    if (!updateInterval) return;\n\n    const intervalId = setInterval(() => {\n      setNow(getNow());\n    }, updateInterval);\n\n    return () => {\n      clearInterval(intervalId);\n    };\n  }, [globalNow, updateInterval]);\n\n  return now;\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAAA,IAAAI,EAAkC,iBAClCC,EAA2B,+BAM3B,SAASC,GAAS,CAChB,OAAO,IAAI,IACb,CAoBe,SAARJ,EAAwBK,EAAmB,CAChD,MAAMC,EAAiBD,GAAS,eAE1B,CAAC,IAAKE,CAAS,KAAI,EAAAC,SAAe,EAClC,CAACC,EAAKC,CAAM,KAAI,YAASH,GAAaH,EAAO,CAAC,EAEpD,sBAAU,IAAM,CACd,GAAI,CAACE,EAAgB,OAErB,MAAMK,EAAa,YAAY,IAAM,CACnCD,EAAON,EAAO,CAAC,CACjB,EAAGE,CAAc,EAEjB,MAAO,IAAM,CACX,cAAcK,CAAU,CAC1B,CACF,EAAG,CAACJ,EAAWD,CAAc,CAAC,EAEvBG,CACT","names":["useNow_exports","__export","useNow","__toCommonJS","import_react","import_useIntlContext","getNow","options","updateInterval","globalNow","useIntlContext","now","setNow","intervalId"]}