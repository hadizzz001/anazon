{"version":3,"sources":["../../../src/core/createBaseTranslator.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {\n  cloneElement,\n  isValidElement,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray\n} from 'react';\nimport AbstractIntlMessages from './AbstractIntlMessages';\nimport Formats from './Formats';\nimport {InitializedIntlConfig} from './IntlConfig';\nimport IntlError, {IntlErrorCode} from './IntlError';\nimport TranslationValues, {RichTranslationValues} from './TranslationValues';\nimport convertFormatsToIntlMessageFormat from './convertFormatsToIntlMessageFormat';\nimport {defaultGetMessageFallback, defaultOnError} from './defaults';\nimport MessageKeys from './utils/MessageKeys';\nimport NestedKeyOf from './utils/NestedKeyOf';\nimport NestedValueOf from './utils/NestedValueOf';\n\nfunction resolvePath(\n  messages: AbstractIntlMessages | undefined,\n  key: string,\n  namespace?: string\n) {\n  if (!messages) {\n    throw new Error(\n      process.env.NODE_ENV !== 'production'\n        ? `No messages available at \\`${namespace}\\`.`\n        : undefined\n    );\n  }\n\n  let message = messages;\n\n  key.split('.').forEach((part) => {\n    const next = (message as any)[part];\n\n    if (part == null || next == null) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `Could not resolve \\`${key}\\` in ${\n              namespace ? `\\`${namespace}\\`` : 'messages'\n            }.`\n          : undefined\n      );\n    }\n\n    message = next;\n  });\n\n  return message;\n}\n\nfunction prepareTranslationValues(values: RichTranslationValues) {\n  if (Object.keys(values).length === 0) return undefined;\n\n  // Workaround for https://github.com/formatjs/formatjs/issues/1467\n  const transformedValues: RichTranslationValues = {};\n  Object.keys(values).forEach((key) => {\n    let index = 0;\n    const value = values[key];\n\n    let transformed;\n    if (typeof value === 'function') {\n      transformed = (chunks: ReactNode) => {\n        const result = value(chunks);\n\n        return isValidElement(result)\n          ? cloneElement(result, {key: key + index++})\n          : result;\n      };\n    } else {\n      transformed = value;\n    }\n\n    transformedValues[key] = transformed;\n  });\n\n  return transformedValues;\n}\n\nexport function getMessagesOrError<Messages extends AbstractIntlMessages>({\n  messages,\n  namespace,\n  onError = defaultOnError\n}: {\n  messages: Messages;\n  namespace?: string;\n  onError?(error: IntlError): void;\n}) {\n  try {\n    if (!messages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages were configured on the provider.`\n          : undefined\n      );\n    }\n\n    const retrievedMessages = namespace\n      ? resolvePath(messages, namespace)\n      : messages;\n\n    if (!retrievedMessages) {\n      throw new Error(\n        process.env.NODE_ENV !== 'production'\n          ? `No messages for namespace \\`${namespace}\\` found.`\n          : undefined\n      );\n    }\n\n    return retrievedMessages;\n  } catch (error) {\n    const intlError = new IntlError(\n      IntlErrorCode.MISSING_MESSAGE,\n      (error as Error).message\n    );\n    onError(intlError);\n    return intlError;\n  }\n}\n\nexport type CreateBaseTranslatorProps<Messages> = InitializedIntlConfig & {\n  cachedFormatsByLocale?: Record<string, Record<string, IntlMessageFormat>>;\n  defaultTranslationValues?: RichTranslationValues;\n  namespace?: string;\n  messagesOrError: Messages | IntlError;\n};\n\nexport default function createBaseTranslator<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>({\n  cachedFormatsByLocale,\n  defaultTranslationValues,\n  formats: globalFormats,\n  getMessageFallback = defaultGetMessageFallback,\n  locale,\n  messagesOrError,\n  namespace,\n  onError,\n  timeZone\n}: CreateBaseTranslatorProps<Messages>) {\n  function getFallbackFromErrorAndNotify(\n    key: string,\n    code: IntlErrorCode,\n    message?: string\n  ) {\n    const error = new IntlError(code, message);\n    onError(error);\n    return getMessageFallback({error, key, namespace});\n  }\n\n  function translateBaseFn(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: RichTranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string | ReactElement | ReactNodeArray {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    let message;\n    try {\n      message = resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n\n    function joinPath(parts: Array<string | undefined>) {\n      return parts.filter((part) => part != null).join('.');\n    }\n\n    const cacheKey = joinPath([namespace, key, String(message)]);\n\n    let messageFormat;\n    if (cachedFormatsByLocale?.[locale]?.[cacheKey]) {\n      messageFormat = cachedFormatsByLocale?.[locale][cacheKey];\n    } else {\n      if (typeof message === 'object') {\n        let code, errorMessage;\n        if (Array.isArray(message)) {\n          code = IntlErrorCode.INVALID_MESSAGE;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an array, but only strings are supported. See https://next-intl-docs.vercel.app/docs/usage/messages#arrays-of-messages`;\n          }\n        } else {\n          code = IntlErrorCode.INSUFFICIENT_PATH;\n          if (process.env.NODE_ENV !== 'production') {\n            errorMessage = `Message at \\`${joinPath([\n              namespace,\n              key\n            ])}\\` resolved to an object, but only strings are supported. Use a \\`.\\` to retrieve nested messages. See https://next-intl-docs.vercel.app/docs/usage/messages#structuring-messages`;\n          }\n        }\n\n        return getFallbackFromErrorAndNotify(key, code, errorMessage);\n      }\n\n      try {\n        messageFormat = new IntlMessageFormat(\n          message,\n          locale,\n          convertFormatsToIntlMessageFormat(\n            {...globalFormats, ...formats},\n            timeZone\n          )\n        );\n      } catch (error) {\n        return getFallbackFromErrorAndNotify(\n          key,\n          IntlErrorCode.INVALID_MESSAGE,\n          (error as Error).message\n        );\n      }\n\n      if (cachedFormatsByLocale) {\n        if (!cachedFormatsByLocale[locale]) {\n          cachedFormatsByLocale[locale] = {};\n        }\n        cachedFormatsByLocale[locale][cacheKey] = messageFormat;\n      }\n    }\n\n    try {\n      const formattedMessage = messageFormat.format(\n        // @ts-ignore `intl-messageformat` expects a different format\n        // for rich text elements since a recent minor update. This\n        // needs to be evaluated in detail, possibly also in regards\n        // to be able to format to parts.\n        prepareTranslationValues({...defaultTranslationValues, ...values})\n      );\n\n      if (formattedMessage == null) {\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `Unable to format \\`${key}\\` in ${\n                namespace ? `namespace \\`${namespace}\\`` : 'messages'\n              }`\n            : undefined\n        );\n      }\n\n      // Limit the function signature to return strings or React elements\n      return isValidElement(formattedMessage) ||\n        // Arrays of React elements\n        Array.isArray(formattedMessage) ||\n        typeof formattedMessage === 'string'\n        ? formattedMessage\n        : String(formattedMessage);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.FORMATTING_ERROR,\n        (error as Error).message\n      );\n    }\n  }\n\n  function translateFn<\n    TargetKey extends MessageKeys<\n      NestedValueOf<Messages, NestedKey>,\n      NestedKeyOf<NestedValueOf<Messages, NestedKey>>\n    >\n  >(\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: TargetKey,\n    /** Key value pairs for values to interpolate into the message. */\n    values?: TranslationValues,\n    /** Provide custom formats for numbers, dates and times. */\n    formats?: Partial<Formats>\n  ): string {\n    const result = translateBaseFn(key, values, formats);\n\n    if (typeof result !== 'string') {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.INVALID_MESSAGE,\n        process.env.NODE_ENV !== 'production'\n          ? `The message \\`${key}\\` in ${\n              namespace ? `namespace \\`${namespace}\\`` : 'messages'\n            } didn't resolve to a string. If you want to format rich text, use \\`t.rich\\` instead.`\n          : undefined\n      );\n    }\n\n    return result;\n  }\n\n  translateFn.rich = translateBaseFn;\n\n  translateFn.raw = (\n    /** Use a dot to indicate a level of nesting (e.g. `namespace.nestedLabel`). */\n    key: string\n  ): any => {\n    if (messagesOrError instanceof IntlError) {\n      // We have already warned about this during render\n      return getMessageFallback({\n        error: messagesOrError,\n        key,\n        namespace\n      });\n    }\n    const messages = messagesOrError;\n\n    try {\n      return resolvePath(messages, key, namespace);\n    } catch (error) {\n      return getFallbackFromErrorAndNotify(\n        key,\n        IntlErrorCode.MISSING_MESSAGE,\n        (error as Error).message\n      );\n    }\n  };\n\n  return translateFn;\n}\n"],"mappings":"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","names":["createBaseTranslator_exports","__export","createBaseTranslator","getMessagesOrError","__toCommonJS","import_intl_messageformat","import_react","import_IntlError","import_convertFormatsToIntlMessageFormat","import_defaults","resolvePath","messages","key","namespace","message","part","next","prepareTranslationValues","values","transformedValues","index","value","transformed","chunks","result","onError","retrievedMessages","error","intlError","IntlError","cachedFormatsByLocale","defaultTranslationValues","globalFormats","getMessageFallback","locale","messagesOrError","timeZone","getFallbackFromErrorAndNotify","code","translateBaseFn","formats","joinPath","parts","cacheKey","messageFormat","errorMessage","IntlMessageFormat","convertFormatsToIntlMessageFormat","formattedMessage","translateFn"]}