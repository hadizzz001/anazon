import Formats from './Formats.mjs';
import TranslationValues, { TranslationValue } from './TranslationValues.mjs';
import MessageKeys from './utils/MessageKeys.mjs';
import NestedValueOf from './utils/NestedValueOf.mjs';
import AbstractIntlMessages from './AbstractIntlMessages.mjs';
import { InitializedIntlConfig } from './IntlConfig.mjs';
import NestedKeyOf from './utils/NestedKeyOf.mjs';
import './DateTimeFormatOptions.mjs';
import './TimeZone.mjs';
import '@formatjs/ecma402-abstract/types/number';
import 'react';
import './IntlError.mjs';

type CoreRichTranslationValues = Record<string, TranslationValue | ((chunks: string) => string)>;
type CreateTranslatorImplProps<Messages> = Omit<InitializedIntlConfig, 'messages'> & {
    namespace: string;
    messages: Messages;
};
declare function createTranslatorImpl<Messages extends AbstractIntlMessages, NestedKey extends NestedKeyOf<Messages>>({ getMessageFallback, messages, namespace, onError, ...rest }: CreateTranslatorImplProps<Messages>, namespacePrefix: string): {
    (key: MessageKeys<NestedValueOf<Messages, NestedKey>, NestedKeyOf<NestedValueOf<Messages, NestedKey>>>, values?: TranslationValues | undefined, formats?: Partial<Formats> | undefined): string;
    rich(key: string, values: CoreRichTranslationValues, formats?: Partial<Formats> | undefined): string;
    raw: (key: string) => any;
};

export { CoreRichTranslationValues, CreateTranslatorImplProps, createTranslatorImpl as default };
