{"version":3,"sources":["../../../src/react/useTranslationsImpl.tsx"],"sourcesContent":["// eslint-disable-next-line import/no-named-as-default -- False positive\nimport IntlMessageFormat from 'intl-messageformat';\nimport {useMemo, useRef} from 'react';\nimport AbstractIntlMessages from '../core/AbstractIntlMessages';\nimport createBaseTranslator, {\n  getMessagesOrError\n} from '../core/createBaseTranslator';\nimport resolveNamespace from '../core/resolveNamespace';\nimport NestedKeyOf from '../core/utils/NestedKeyOf';\nimport useIntlContext from './useIntlContext';\n\nexport default function useTranslationsImpl<\n  Messages extends AbstractIntlMessages,\n  NestedKey extends NestedKeyOf<Messages>\n>(allMessages: Messages, namespace: NestedKey, namespacePrefix: string) {\n  const {\n    defaultTranslationValues,\n    formats: globalFormats,\n    getMessageFallback,\n    locale,\n    onError,\n    timeZone\n  } = useIntlContext();\n\n  // The `namespacePrefix` is part of the type system.\n  // See the comment in the hook invocation.\n  allMessages = allMessages[namespacePrefix] as Messages;\n  namespace = resolveNamespace(namespace, namespacePrefix) as NestedKey;\n\n  const cachedFormatsByLocaleRef = useRef<\n    Record<string, Record<string, IntlMessageFormat>>\n  >({});\n\n  const messagesOrError = useMemo(\n    () => getMessagesOrError({messages: allMessages, namespace, onError}),\n    [allMessages, namespace, onError]\n  );\n\n  const translate = useMemo(\n    () =>\n      createBaseTranslator({\n        cachedFormatsByLocale: cachedFormatsByLocaleRef.current,\n        getMessageFallback,\n        messagesOrError,\n        defaultTranslationValues,\n        namespace,\n        onError,\n        formats: globalFormats,\n        locale,\n        timeZone\n      }),\n    [\n      getMessageFallback,\n      messagesOrError,\n      defaultTranslationValues,\n      namespace,\n      onError,\n      globalFormats,\n      locale,\n      timeZone\n    ]\n  );\n\n  return translate;\n}\n"],"mappings":"0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,IAAA,eAAAC,EAAAH,GAEA,IAAAI,EAA8B,iBAE9BC,EAEO,2CACPC,EAA6B,uCAE7BC,EAA2B,+BAEZ,SAARL,EAGLM,EAAuBC,EAAsBC,EAAyB,CACtE,KAAM,CACJ,yBAAAC,EACA,QAASC,EACT,mBAAAC,EACA,OAAAC,EACA,QAAAC,EACA,SAAAC,CACF,KAAI,EAAAC,SAAe,EAInBT,EAAcA,EAAYE,CAAe,EACzCD,KAAY,EAAAS,SAAiBT,EAAWC,CAAe,EAEvD,MAAMS,KAA2B,UAE/B,CAAC,CAAC,EAEEC,KAAkB,WACtB,OAAM,sBAAmB,CAAC,SAAUZ,EAAa,UAAAC,EAAW,QAAAM,CAAO,CAAC,EACpE,CAACP,EAAaC,EAAWM,CAAO,CAClC,EA2BA,SAzBkB,WAChB,OACE,EAAAM,SAAqB,CACnB,sBAAuBF,EAAyB,QAChD,mBAAAN,EACA,gBAAAO,EACA,yBAAAT,EACA,UAAAF,EACA,QAAAM,EACA,QAASH,EACT,OAAAE,EACA,SAAAE,CACF,CAAC,EACH,CACEH,EACAO,EACAT,EACAF,EACAM,EACAH,EACAE,EACAE,CACF,CACF,CAGF","names":["useTranslationsImpl_exports","__export","useTranslationsImpl","__toCommonJS","import_react","import_createBaseTranslator","import_resolveNamespace","import_useIntlContext","allMessages","namespace","namespacePrefix","defaultTranslationValues","globalFormats","getMessageFallback","locale","onError","timeZone","useIntlContext","resolveNamespace","cachedFormatsByLocaleRef","messagesOrError","createBaseTranslator"]}